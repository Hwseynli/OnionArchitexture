// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OnionArchitecture.Persistence.Context;

#nullable disable

namespace OnionArchitecture.Persistence.Migrations
{
    [DbContext(typeof(TestDbContext))]
    partial class TestDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OnionArchitecture.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mail");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("LastUpdateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update_date_time");

                    b.Property<DateTime>("RecordDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_date_time");

                    b.Property<int?>("UpdateById")
                        .HasColumnType("integer")
                        .HasColumnName("update_by_id");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("OnionArchitecture.Domain.Entities.Documents.AdditionDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<int>("DocumentType")
                        .HasColumnType("integer")
                        .HasColumnName("document_type");

                    b.Property<DateTime?>("LastUpdateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update_date_time");

                    b.Property<string>("Other")
                        .HasColumnType("text")
                        .HasColumnName("other");

                    b.Property<DateTime>("RecordDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_date_time");

                    b.Property<int?>("UpdateById")
                        .HasColumnType("integer")
                        .HasColumnName("update_by_id");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("additionDocuments", (string)null);
                });

            modelBuilder.Entity("OnionArchitecture.Domain.Entities.Documents.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdditionDocumentId")
                        .HasColumnType("integer")
                        .HasColumnName("additionDocument_id");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("LastUpdateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update_date_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<DateTime>("RecordDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_date_time");

                    b.Property<int?>("UpdateById")
                        .HasColumnType("integer")
                        .HasColumnName("update_by_id");

                    b.HasKey("Id");

                    b.HasIndex("AdditionDocumentId");

                    b.ToTable("documents", (string)null);
                });

            modelBuilder.Entity("OnionArchitecture.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("activated");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mail");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("firstName");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lastName");

                    b.Property<DateTime>("LastPasswordChangeDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_password_change_date");

                    b.Property<string>("OtpCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("OtpGeneratedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userName");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("OnionArchitecture.Domain.Entities.Documents.AdditionDocument", b =>
                {
                    b.HasOne("OnionArchitecture.Domain.Entities.Customer", "Customer")
                        .WithMany("AdditionDocuments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("OnionArchitecture.Domain.Entities.Documents.Document", b =>
                {
                    b.HasOne("OnionArchitecture.Domain.Entities.Documents.AdditionDocument", "AdditionDocument")
                        .WithMany("Documents")
                        .HasForeignKey("AdditionDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdditionDocument");
                });

            modelBuilder.Entity("OnionArchitecture.Domain.Entities.Customer", b =>
                {
                    b.Navigation("AdditionDocuments");
                });

            modelBuilder.Entity("OnionArchitecture.Domain.Entities.Documents.AdditionDocument", b =>
                {
                    b.Navigation("Documents");
                });
#pragma warning restore 612, 618
        }
    }
}
